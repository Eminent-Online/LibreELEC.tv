From f96b4608fa43bb3470b4b8e31980f4c127724a1d Mon Sep 17 00:00:00 2001
From: afl1 <afl2001@gmail.com>
Date: Wed, 7 Aug 2019 03:49:23 +0100
Subject: [PATCH 05/43] VideoPlayer: Late frames patch.

Patch: kodi-le-030-lateframes.patch
---
 xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp | 15 ++++++++++-----
 1 file changed, 10 insertions(+), 5 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
index f5120a6..785f57d 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
@@ -224,7 +224,7 @@ bool CRenderManager::Configure()
     m_lateframes = -1;
     m_presentevent.notifyAll();
     m_renderedOverlay = false;
-    m_renderDebug = false;
+    m_QueueSkip = 0;
     m_clockSync.Reset();
     m_dvdClock.SetVsyncAdjust(0);
     m_overlays.SetStereoMode(m_stereomode);
@@ -1056,7 +1056,8 @@ int CRenderManager::WaitForBuffer(volatile std::atomic_bool&bStop, int timeout)
   XbmcThreads::EndTime endtime(timeout);
   while(m_free.empty())
   {
-    m_presentevent.wait(lock, std::min(50, timeout));
+    CLog::Log(LOGDEBUG, LOGAVTIMING, "CRenderManager::WaitForBuffer - timeout:%d",std::min(20, timeout));
+    m_presentevent.wait(lock, std::min(20, timeout));
     if (endtime.IsTimePast() || bStop)
     {
       if (timeout != 0 && !bStop)
@@ -1119,7 +1120,8 @@ void CRenderManager::PrepareNextRender()
     m_dvdClock.SetVsyncAdjust(0);
   }
 
-  CLog::LogF(LOGDEBUG, LOGAVTIMING, "frameOnScreen: %f renderPts: %f nextFramePts: %f -> diff: %f  render: %u forceNext: %u", frameOnScreen, renderPts, nextFramePts, (renderPts - nextFramePts), renderPts >= nextFramePts, m_forceNext);
+  CLog::LogF(LOGDEBUG, LOGAVTIMING, "frameOnScreen: %0.3f renderPts: %0.3f nextFramePts: %0.3f -> diff: %0.3f  render: %u forceNext: %u",
+    frameOnScreen / DVD_TIME_BASE, renderPts / DVD_TIME_BASE, nextFramePts / DVD_TIME_BASE, (renderPts - nextFramePts) / DVD_TIME_BASE, renderPts >= nextFramePts, m_forceNext);
 
   bool combined = false;
   if (m_presentsourcePast >= 0)
@@ -1141,9 +1143,13 @@ void CRenderManager::PrepareNextRender()
       // renderer/drivers have internal queues, being slightly late here does not mean that
       // we are really late. The likelihood that we recover decreases the greater m_lateframes
       // get. Skipping a frame is easier than having decoder dropping one (lateframes > 10)
-      double x = (m_lateframes <= 6) ? 0.98 : 0;
+      double x = (m_lateframes <= 6) ? 1.99 : 0;
       if (renderPts < m_Queue[*iter].pts + x * frametime)
         break;
+      m_QueueSkip++;
+      CLog::Log(LOGDEBUG, "CRenderManager::PrepareNextRender  Frame Skip:%d iter.pts:%0.3f lf:%d latency:%0.3f Clock:%0.3f", m_QueueSkip,
+        m_Queue[*iter].pts / DVD_TIME_BASE, static_cast<int>((renderPts - m_Queue[*iter].pts) * m_fps / DVD_TIME_BASE),
+        m_displayLatency / DVD_TIME_BASE, m_dvdClock.GetClock() / DVD_TIME_BASE);
       idx = *iter;
       ++iter;
     }
@@ -1154,7 +1160,6 @@ void CRenderManager::PrepareNextRender()
       if (m_presentsourcePast >= 0)
       {
         m_discard.push_back(m_presentsourcePast);
-        m_QueueSkip++;
       }
       m_presentsourcePast = m_queued.front();
       m_queued.pop_front();
-- 
2.7.4

