From 6c3830ffdf8f8c12728e99646fa890026ebe6fcb Mon Sep 17 00:00:00 2001
From: afl1 <afl2001@gmail.com>
Date: Wed, 7 Aug 2019 04:03:07 +0100
Subject: [PATCH 16/43] VideoPlayer: A/V GetLevel patch.

Patch: kodi-le-045-new-av-GetLevel.patch
---
 xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp |  4 +++-
 xbmc/cores/VideoPlayer/VideoPlayerAudio.h   |  4 +++-
 xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp | 11 +++++++----
 xbmc/cores/VideoPlayer/VideoPlayerVideo.h   |  3 +++
 4 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
index 972cb26..c56aa60 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
@@ -221,6 +221,7 @@ void CVideoPlayerAudio::Process()
   audioframe.nb_frames = 0;
   audioframe.framesOut = 0;
   m_audioStats.Start();
+  m_pts = DVD_NOPTS_VALUE;
 
   bool onlyPrioMsgs = false;
 
@@ -329,6 +330,7 @@ void CVideoPlayerAudio::Process()
       m_stalled = true;
       m_audioClock = 0;
       audioframe.nb_frames = 0;
+      m_pts = DVD_NOPTS_VALUE;
 
       if (sync)
       {
@@ -411,7 +413,7 @@ void CVideoPlayerAudio::Process()
       {
         onlyPrioMsgs = true;
       }
-
+      m_pts = pPacket->pts;
     } // demuxer packet
 
     pMsg->Release();
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerAudio.h b/xbmc/cores/VideoPlayer/VideoPlayerAudio.h
index 5aedd08..248f1be 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerAudio.h
+++ b/xbmc/cores/VideoPlayer/VideoPlayerAudio.h
@@ -40,7 +40,8 @@ public:
   // waits until all available data has been rendered
   bool AcceptsData() const override;
   bool HasData() const override { return m_messageQueue.GetDataSize() > 0; }
-  int  GetLevel() const override { return m_messageQueue.GetLevel(); }
+  int  GetLevel() const override { return (m_pts == DVD_NOPTS_VALUE) || (m_pts < m_pClock->GetClock() + 80000) ?
+                                           m_messageQueue.GetLevel() : m_messageQueue.GetLevel() + int((m_pts - m_pClock->GetClock() - 80000) / 80000);}
   bool IsInited() const override { return m_messageQueue.IsInited(); }
   void SendMessage(CDVDMsg* pMsg, int priority = 0) override { m_messageQueue.Put(pMsg, priority); }
   void FlushMessages() override { m_messageQueue.Flush(); }
@@ -94,6 +95,7 @@ protected:
 
   bool   m_prevskipped;
   double m_maxspeedadjust;
+  double	   m_pts;
 
   struct SInfo
   {
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
index 0d3cc64..5cb49e1 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
@@ -275,25 +275,25 @@ bool CVideoPlayerVideo::IsInited() const
 inline void CVideoPlayerVideo::SendMessage(CDVDMsg* pMsg, int priority)
 {
   m_messageQueue.Put(pMsg, priority);
-  m_processInfo.SetLevelVQ(m_messageQueue.GetLevel());
+  SetLevel();
 }
 
 inline void CVideoPlayerVideo::SendMessageBack(CDVDMsg* pMsg, int priority)
 {
   m_messageQueue.PutBack(pMsg, priority);
-  m_processInfo.SetLevelVQ(m_messageQueue.GetLevel());
+  SetLevel();
 }
 
 inline void CVideoPlayerVideo::FlushMessages()
 {
   m_messageQueue.Flush();
-  m_processInfo.SetLevelVQ(m_messageQueue.GetLevel());
+  SetLevel();
 }
 
 inline MsgQueueReturnCode CVideoPlayerVideo::GetMessage(CDVDMsg** pMsg, unsigned int iTimeoutInMilliSeconds, int &priority)
 {
   MsgQueueReturnCode ret = m_messageQueue.Get(pMsg, iTimeoutInMilliSeconds, priority);
-  m_processInfo.SetLevelVQ(m_messageQueue.GetLevel());
+  SetLevel();
   return ret;
 }
 
@@ -313,6 +313,7 @@ void CVideoPlayerVideo::Process()
   m_iDroppedFrames = 0;
   m_rewindStalled = false;
   m_outputSate = OUTPUT_NORMAL;
+  m_pts = DVD_NOPTS_VALUE;
 
   while (!m_bStop)
   {
@@ -450,6 +451,7 @@ void CVideoPlayerVideo::Process()
       m_packets.clear();
       pts = 0;
       m_rewindStalled = false;
+      m_pts = DVD_NOPTS_VALUE;
 
       m_ptsTracker.Flush();
       //we need to recalculate the framerate
@@ -577,6 +579,7 @@ void CVideoPlayerVideo::Process()
         {
           onlyPrioMsgs = true;
         }
+        m_pts = pPacket->pts;
       }
       else
       {
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerVideo.h b/xbmc/cores/VideoPlayer/VideoPlayerVideo.h
index 689948c..b4b5cde 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerVideo.h
+++ b/xbmc/cores/VideoPlayer/VideoPlayerVideo.h
@@ -75,6 +75,7 @@ public:
   // classes
   CDVDOverlayContainer* m_pOverlayContainer;
   CDVDClock* m_pClock;
+  double m_pts;
 
 protected:
 
@@ -100,6 +101,8 @@ protected:
   void ResetFrameRateCalc();
   void CalcFrameRate();
   int CalcDropRequirement(double pts);
+  void SetLevel(){ m_processInfo.SetLevelVQ((m_pts == DVD_NOPTS_VALUE) || (m_pts < m_pClock->GetClock() + 80000) ?
+                     m_messageQueue.GetLevel() : m_messageQueue.GetLevel() + int((m_pts - m_pClock->GetClock() - 80000) / 80000));}
 
   double m_iSubtitleDelay;
 
-- 
2.7.4

