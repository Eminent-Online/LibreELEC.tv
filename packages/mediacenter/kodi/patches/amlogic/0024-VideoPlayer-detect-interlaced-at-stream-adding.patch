From bbf435b3b77cf526b454684917095ee6d2a18af5 Mon Sep 17 00:00:00 2001
From: afl1 <afl2001@gmail.com>
Date: Wed, 7 Aug 2019 04:18:54 +0100
Subject: [PATCH 24/43] VideoPlayer: detect interlaced at stream adding

Patch: kodi-le-061-detect-interlaced-at-stream-adding.patch
---
 .../DVDCodecs/Video/DVDVideoCodecAmlogic.cpp       | 26 ++++++++++----
 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h      |  4 +++
 .../VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp     | 41 ++++++++++++++++++----
 xbmc/cores/VideoPlayer/DVDStreamInfo.cpp           |  6 ++++
 xbmc/cores/VideoPlayer/DVDStreamInfo.h             |  2 ++
 xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp        | 28 +++++++++------
 6 files changed, 84 insertions(+), 23 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
index 3219129..79fb7a8 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
@@ -120,7 +120,7 @@ bool CDVDVideoCodecAmlogic::Open(CDVDStreamInfo &hints, CDVDCodecOptions &option
   m_hints = hints;
   m_hints.pClock = hints.pClock;
 
-  CLog::Log(LOGDEBUG, "CDVDVideoCodecAmlogic::Opening: codec %d profile:%d extra_size:%d", m_hints.codec, hints.profile, hints.extrasize);
+  CLog::Log(LOGDEBUG, "%s::%s - codec %d profile:%d extra_size:%d fps:%d/%d", __MODULE_NAME__, __FUNCTION__, m_hints.codec, m_hints.profile, m_hints.extrasize, m_hints.fpsrate, m_hints.fpsscale);
 
   switch(m_hints.codec)
   {
@@ -380,6 +380,7 @@ bool CDVDVideoCodecAmlogic::AddData(const DemuxPacket &packet)
       if (packet.pts == DVD_NOPTS_VALUE)
         m_hints.ptsinvalid = true;
 
+      CLog::Log(LOGINFO, "%s::%s Open decoder: fps:%d/%d", __MODULE_NAME__, __FUNCTION__, m_hints.fpsrate, m_hints.fpsscale);
       if (m_Codec && !m_Codec->OpenDecoder(m_hints))
         CLog::Log(LOGERROR, "%s: Failed to open Amlogic Codec", __MODULE_NAME__);
 
@@ -477,11 +478,24 @@ void CDVDVideoCodecAmlogic::FrameRateTracking(uint8_t *pData, int iSize, double
       if (m_mpeg2_sequence_pts == DVD_NOPTS_VALUE)
         m_mpeg2_sequence_pts = dts;
 
-      m_hints.fpsrate = m_mpeg2_sequence->fps_rate;
-      m_hints.fpsscale = m_mpeg2_sequence->fps_scale;
-      m_framerate = static_cast<float>(m_mpeg2_sequence->fps_rate) / m_mpeg2_sequence->fps_scale;
-      m_video_rate = (int)(0.5 + (96000.0 / m_framerate));
-
+      CLog::Log(LOGDEBUG, "%s::%s fps:%d/%d mpeg2_fps:%d/%d options:0x%2x", __MODULE_NAME__, __FUNCTION__,
+              m_hints.fpsrate, m_hints.fpsscale, m_mpeg2_sequence->fps_rate, m_mpeg2_sequence->fps_scale, m_hints.codecOptions);
+      if  (!(m_hints.codecOptions & CODEC_INTERLACED))
+      {
+        m_hints.fpsrate = m_mpeg2_sequence->fps_rate;
+        m_hints.fpsscale = m_mpeg2_sequence->fps_scale;
+      }
+      if (m_hints.fpsrate && m_hints.fpsscale)
+      {
+        m_framerate = static_cast<float>(m_hints.fpsrate) / m_hints.fpsscale;
+        if (m_hints.codecOptions & CODEC_UNKNOWN_I_P)
+          if (std::abs(m_framerate - 25.0f) < 0.02f || std::abs(m_framerate - 29.97f) < 0.02f)
+          {
+            m_framerate += m_framerate;
+            m_hints.fpsrate += m_hints.fpsrate;
+          }
+        m_video_rate = (int)(0.5 + (96000.0 / m_framerate));
+      }
       m_hints.width    = m_mpeg2_sequence->width;
       m_hints.height   = m_mpeg2_sequence->height;
       m_hints.aspect   = m_mpeg2_sequence->ratio;
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
index a8a6dd9..7e88363 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
@@ -126,6 +126,8 @@ public:
   {
     iFpsScale = 0;
     iFpsRate = 0;
+    bInterlaced = true;
+    bUnknownIP = true;
     iHeight = 0;
     iWidth = 0;
     fAspect = 0.0;
@@ -151,6 +153,8 @@ public:
   int iBitsPerPixel;
   int iBitRate;
   std::string stereo_mode; // expected stereo mode
+  bool bInterlaced; // progressive/interlaced flag
+  bool bUnknownIP; // progressive/interlace unknown
 };
 
 class CDemuxStreamAudio : public CDemuxStream
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
index becde1b..538bfcd 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
@@ -10,6 +10,7 @@
 
 #include <sstream>
 #include <utility>
+#include <cmath>
 
 #include "commons/Exception.h"
 #include "cores/FFmpeg.h"
@@ -1506,6 +1507,7 @@ CDemuxStream* CDVDDemuxFFmpeg::AddStream(int streamIdx)
       case AVMEDIA_TYPE_VIDEO:
       {
         CDemuxStreamVideoFFmpeg* st = new CDemuxStreamVideoFFmpeg(pStream);
+        float fps = 0;        
         stream = st;
         if(strcmp(m_pFormatContext->iformat->name, "flv") == 0)
           st->bVFR = true;
@@ -1517,24 +1519,49 @@ CDemuxStream* CDVDDemuxFFmpeg::AddStream(int streamIdx)
           st->bPTSInvalid = true;
 
         AVRational r_frame_rate = pStream->r_frame_rate;
+        CLog::Log(LOGDEBUG, "DVDDemuxFFmpeg::%s - fps:%d/%d tbr:%d/%d tbn:%d/%d", __FUNCTION__,
+            pStream->avg_frame_rate.num, pStream->avg_frame_rate.den, r_frame_rate.num, r_frame_rate.den, pStream->codec->time_base.den, pStream->codec->time_base.num);
 
-        //average fps is more accurate for mkv files
-        if (m_bMatroska && pStream->avg_frame_rate.den && pStream->avg_frame_rate.num)
+        st->bUnknownIP = false;
+        st->bInterlaced = false;
+        st->iFpsRate  = 0;
+        st->iFpsScale = 0;
+
+        if (pStream->avg_frame_rate.den && pStream->avg_frame_rate.num)
         {
-          st->iFpsRate = pStream->avg_frame_rate.num;
+          st->iFpsRate  = pStream->avg_frame_rate.num;
           st->iFpsScale = pStream->avg_frame_rate.den;
         }
         else if(r_frame_rate.den && r_frame_rate.num)
         {
-          st->iFpsRate = r_frame_rate.num;
+          st->iFpsRate  = r_frame_rate.num;
           st->iFpsScale = r_frame_rate.den;
         }
-        else
+        if (st->iFpsScale)
+          fps = static_cast<float>(st->iFpsRate) / static_cast<float>(st->iFpsScale);
+
+        if (fps > 24.5f && pStream->codec->time_base.num && pStream->codec->time_base.den &&
+            pStream->codec->field_order != AV_FIELD_PROGRESSIVE && pStream->codec->field_order != AV_FIELD_UNKNOWN)
         {
-          st->iFpsRate  = 0;
-          st->iFpsScale = 0;
+          if (static_cast<float>(pStream->codec->time_base.den) / static_cast<float>(pStream->codec->time_base.num) < 61.0)
+          {
+            st->iFpsRate  = pStream->codec->time_base.den;
+            st->iFpsScale = pStream->codec->time_base.num;
+          }
+          else
+            st->iFpsRate  *= 2;
+
+          st->bInterlaced = true;
+        }
+        else if (r_frame_rate.den && r_frame_rate.num && std::abs(static_cast<float>(r_frame_rate.num) / static_cast<float>(r_frame_rate.den) - 2.0f * fps) < 0.01f)
+        {
+          st->iFpsRate  = r_frame_rate.num;
+          st->iFpsScale = r_frame_rate.den;
+          st->bInterlaced = true;
         }
 
+        CLog::Log(LOGDEBUG, "DVDDemuxFFmpeg::%s - fps:%d/%d i/p:%d", __FUNCTION__, st->iFpsRate, st->iFpsScale, st->bInterlaced);
+ 
         if (pStream->codec_info_nb_frames > 0 &&
             pStream->codec_info_nb_frames <= 2 &&
             m_pInput->IsStreamType(DVDSTREAM_TYPE_DVD))
diff --git a/xbmc/cores/VideoPlayer/DVDStreamInfo.cpp b/xbmc/cores/VideoPlayer/DVDStreamInfo.cpp
index f1679dd..b8847e2 100644
--- a/xbmc/cores/VideoPlayer/DVDStreamInfo.cpp
+++ b/xbmc/cores/VideoPlayer/DVDStreamInfo.cpp
@@ -226,6 +226,12 @@ void CDVDStreamInfo::Assign(const CDemuxStream& right, bool withextradata)
   else if (right.type == STREAM_VIDEO)
   {
     const CDemuxStreamVideo *stream = static_cast<const CDemuxStreamVideo*>(&right);
+    if (stream->bInterlaced)
+      codecOptions |= CODEC_INTERLACED;
+
+    if (stream->bUnknownIP)
+      codecOptions |= CODEC_UNKNOWN_I_P;
+
     fpsscale  = stream->iFpsScale;
     fpsrate   = stream->iFpsRate;
     height    = stream->iHeight;
diff --git a/xbmc/cores/VideoPlayer/DVDStreamInfo.h b/xbmc/cores/VideoPlayer/DVDStreamInfo.h
index dca0ba4..64e8f34 100644
--- a/xbmc/cores/VideoPlayer/DVDStreamInfo.h
+++ b/xbmc/cores/VideoPlayer/DVDStreamInfo.h
@@ -17,6 +17,8 @@ extern "C" {
 
 #define CODEC_FORCE_SOFTWARE 0x01
 #define CODEC_ALLOW_FALLBACK 0x02
+#define CODEC_INTERLACED     0x40
+#define CODEC_UNKNOWN_I_P    0x80
 
 class CDemuxStream;
 struct DemuxCryptoSession;
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
index 0c744d6..70b1627 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
@@ -154,7 +154,7 @@ bool CVideoPlayerVideo::OpenStream(CDVDStreamInfo hint)
 
 void CVideoPlayerVideo::OpenStream(CDVDStreamInfo &hint, CDVDVideoCodec* codec)
 {
-  CLog::Log(LOGDEBUG, "CVideoPlayerVideo::OpenStream - open stream with codec id: %i", hint.codec);
+  CLog::Log(LOGDEBUG, "CVideoPlayerVideo::OpenStream - open stream with codec id: %i fps:%d/%d options:%02x", hint.codec, hint.fpsrate, hint.fpsscale, hint.codecOptions);
 
   m_processInfo.GetVideoBufferManager().ReleasePools();
 
@@ -164,16 +164,24 @@ void CVideoPlayerVideo::OpenStream(CDVDStreamInfo &hint, CDVDVideoCodec* codec)
     m_fFrameRate = DVD_TIME_BASE / CDVDCodecUtils::NormalizeFrameduration((double)DVD_TIME_BASE * hint.fpsscale / hint.fpsrate);
     m_bFpsInvalid = false;
 
-    if (MathUtils::FloatEquals(static_cast<float>(m_fFrameRate), 25.0f, 0.01f))
+    if (hint.codecOptions & CODEC_UNKNOWN_I_P)
     {
-      m_fFrameRate = 50.0;
-      m_processInfo.SetVideoInterlaced(true);
-    }
-    if (MathUtils::FloatEquals(static_cast<float>(m_fFrameRate), 29.97f, 0.01f))
-    {
-      m_fFrameRate = 60000.0 / 1001.0;
-      m_processInfo.SetVideoInterlaced(true);
+      if (MathUtils::FloatEquals(static_cast<float>(m_fFrameRate), 25.0f, 0.01f))
+      {
+        m_fFrameRate = 50.0;
+        m_processInfo.SetVideoInterlaced(true);
+      }
+      else if (MathUtils::FloatEquals(static_cast<float>(m_fFrameRate), 29.97f, 0.01f))
+      {
+        m_fFrameRate = 60000.0 / 1001.0;
+        m_processInfo.SetVideoInterlaced(true);
+      }
+      else
+        m_processInfo.SetVideoInterlaced(false);
     }
+    else
+      m_processInfo.SetVideoInterlaced((hint.codecOptions & CODEC_INTERLACED) == CODEC_INTERLACED);
+
     m_retryProgressive = 0;
     m_processInfo.SetVideoFps(static_cast<float>(m_fFrameRate));
   }
@@ -216,7 +224,7 @@ void CVideoPlayerVideo::OpenStream(CDVDStreamInfo &hint, CDVDVideoCodec* codec)
   }
   if (!codec)
   {
-    CLog::Log(LOGNOTICE, "CVideoPlayerVideo::%s - Creating Codec: %i",__FUNCTION__,  hint.codec);
+    CLog::Log(LOGNOTICE, "CVideoPlayerVideo::%s - Creating Codec: %i fps:%d/%d options:%02x", __FUNCTION__, hint.codec, hint.fpsrate, hint.fpsscale, hint.codecOptions);
     hint.pClock = m_pClock;
     hint.codecOptions |= CODEC_ALLOW_FALLBACK;
     codec = CDVDFactoryCodec::CreateVideoCodec(hint, m_processInfo);
-- 
2.7.4

